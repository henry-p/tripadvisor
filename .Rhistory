}
result[i] = sum(kkm@withinss)
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeansWrapper(m, "rbfdot", nrClusters)
nrClusters = 15
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(km)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i] = sum(kkm@withinss)
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
nrClusters = 10
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(kkm)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i] = sum(kkm@withinss)
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeans.result.rbfdot
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(kkm)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i] = kkm
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeans.result.rbfdot
kkmeans(m, centers = i, kernel = kernel)
kkmeans(m, centers = 10, kernel = "rbfdot")
kkmeans(m, centers = 10, kernel = "rbfdot")
kkmeans(m, centers = 10, kernel = "rbfdot")
kkmeans(m, centers = 10, kernel = "rbfdot")
lol = kkmeansWrapper(m, "rbfdot", nrClusters)
lol
lol$
str(lol)
debugSource('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
kkm
result
kkm
kkm@.Data
kkm@centers
kkm@size
kkm@kernelf
kkm
m
str(m)
kkmeans.result.rbfdot
debugSource('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
kkm
kkm@.Data
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(kkm)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i]$membership = kkm@.Data
result[i]$centers = kkm@centers
result[i]$withinss = kkm@withinss
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeans.result.rbfdot
j = 0
j[1]$hello = "lol"
j = 0
j[1] = list()
j[1] = list(0)
j
j[1]$hey = 123
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(kkm)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i] = list(membership = kkm@.Data, centers = kkm@centers, withinss = kkm@withinss)
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeans.result.rbfdot
kkmeans.result.rbfdot
debugSource('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
result
resu;t
result
kkm@.Data
debugSource('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
rm(j)
j = 0
j[1] = list(hallo = c(1,2,3))
j
j[1] = list(hallo = c(1,2,3), asiohd = c(123,1234,234))
w = list(hallo = c(1,2,3), asiohd = c(123,1234,234))
w
j[1] = list(hallo = c(1,2,3), asiohd = c(123,1234,234))
j[1] = list(list(hallo = c(1,2,3), asiohd = c(123,1234,234)))
j
kkmeansWrapper = function(x, kernel, nrClusters) {
result = 0
for (i in seq_len(nrClusters)) {
kkm = NA
while(is.na(kkm)) {
tryCatch({
kkm = kkmeans(m, centers = i, kernel = kernel)
}, error=function(e){})
}
result[i] = list(list(membership = kkm@.Data, centers = kkm@centers, withinss = kkm@withinss))
}
return(result)
}
kkmeans.result.rbfdot = kkmeansWrapper(m, "rbfdot", nrClusters)
kkmeans.result.rbfdot
kkmeans.result.rbfdot[[1]]
kkmeans.result.rbfdot[1]
kkmeans.result.rbfdot[[1]]$membership
class(kkmeans.result.rbfdot[[1]]$membership)
class(kkmeans.result.rbfdot[[1]]$centers)
class(kkmeans.result.rbfdot[[1]]$withinss)
kkmeans.result.rbfdot[[1]]$centers
kkmeans.result.rbfdot[[2]]$centers
kkmeans.result.rbfdot[[2]]$membership
kkmeans.result.rbfdot@wihtinss
kkmeans.result.rbfdot@withinss
kkmeans.result.rbfdot[[1]]$withinss
kkmeans.result.rbfdot[[2]]$withinss
sum(kkmeans.result.rbfdot[[2]]$withinss)
sapply(kkmeans.result.rbfdot, function(x) {x$withinss})
sapply(kkmeans.result.rbfdot, function(x) {sum(x$withinss)})
source('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.polydot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.vanilladot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.laplacedot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.besseldot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.anovadot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.polydot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.polydot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.vanilladot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.laplacedot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.besseldot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.anovadot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
source('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.polydot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.vanilladot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.laplacedot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.besseldot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.anovadot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
pdf(file='plots.pdf')
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.polydot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.vanilladot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.laplacedot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.besseldot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.anovadot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
dev.off()
getwd()
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
dev.off()
dev.off()
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.rbfdot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
kkmeans.result.rbfdot
kkmeans.result.rbfdot[[6]]
kkmeans.result.rbfdot[[6]]$membership
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/clean_data.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
kkmeans.result.rbfdot[[6]]$membership
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
coordinateshotels.total
nrow(coordinateshotels.total)
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
m
maxs = apply(m, 2, max)
mins = apply(m, 2, min)
maxs
scale(m, center = mins, scale = maxs - mins)
m = scale(m, center = mins, scale = maxs - mins)
m
str(m)
setwd("/Users/henry/Google Drive/Data Analytics 1/R Code")
source('~/Google Drive/Data Analytics 1/R Code/kernel k-means.R', echo=TRUE)
kkmeans.result.rbfdot
kkmeans.result.rbfdot[[4]]
kkmeans.result.rbfdot[[4]]$membership
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"])
is.na(data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"]))
which(is.na(data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"])))
apply(is.na(data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"]))), 1, which)
apply(is.na(data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"])), 1, which)
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
a = data.frame(lat = hotels.total[, "latitude"], lon = hotels.total[, "longitude"])
which(is.na(a))
a
apply(a, 1, function(x) {which(x)})
apply(a, 1, function(x) {which(is.na(x))})
apply(a, 1, function(x) {is.na(x)})
rowSums(a)
a
rowSums(a) == NA
which(rowSums(a) == NA)
which(rowSums(a == NA) > 0)
apply(a, 1, function(x){any(is.na(x))})
length(apply(a, 1, function(x){any(is.na(x))}))
which(apply(a, 1, function(x){any(is.na(x))}) == TRUE)
kkmeans.result.rbfdot[[4]]$membership
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
plot(seq_len(nrClusters), kkmeansTWSS(kkmeans.result.besseldot), type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd]
kkmeans.result.rbfdot[[4]]$membership[-missingCoordsInd]
length(kkmeans.result.rbfdot[[4]]$membership[-missingCoordsInd])
missingCoordsInd = which(apply(coordinateshotels.total, 1, function(row){any(is.na(row))}))
missingCoordsInd
missingCoordsInd = which(apply(coordinateshotels.total, 1, function(row){any(is.na(row))}) == TRUE)
as.factor(kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd])
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
?hist
frequency(kkmeans.result.besseldot[[4]]$membership)
hist(kkmeans.result.besseldot[[4]]$membership)
count(kkmeans.result.besseldot[[4]]$membership)
table(kkmeans.result.besseldot[[4]]$membership)
table(kkmeans.result.rbfdot[[4]]$membership)
### HClust (only ward.d and ward.d2) ###
clustersD <- hclust(dist(d), method = "ward.D")
clustersD2 <- hclust(dist(d), method = "ward.D2")
plot(clustersD)
abline(h=25, col="red")
abline(h=17, col="red")
plot(clustersD2)
abline(h=17, col="red")
### Add clusters to hotels (only four clusters) ###
groupsD4 = cutree(clustersD, k=4)
hotels.total = cbind(hotels.total, groupsD4)
hotels.clustered = hotels.total[-c(15:59)]
d <- reductionResult$x[,1:25] # Remove feature which could downgrade results; 25 -> >98%
e <- as.factors(reductionData)
e <- as.factor(reductionData)
source('~/Google Drive/Data Analytics 1/R Code/clean_data.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/cluster_analytics.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/dimReduction_clustering.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/cluster_analytics.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/cluster_analytics.R', echo=TRUE)
clustersD <- hclust(dist(d), method = "ward.D")
clustersD$order
clustersD
groupsD4 = cutree(clustersD, k=4)
groupsD4
class(groupsD4)
groupsD4[1]
groupsD4[1,]
groupsD4[, 1]
dim(groupsD4)
cutree(clustersD, k=4)
groupsD4 = cutree(clustersD, k=4)
hotels.hierarchical = cbind(hotels.total, groupsD4)
hotels.clustered = hotels.hierarchical[-c(15:59)]
hotels.hierarchical
hotels.hierarchical[,3]
str(hotels.hierarchical)
hotels.hierarchical$groupsD4
source('~/Google Drive/Data Analytics 1/R Code/map_hotels.R', echo=TRUE)
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "firebrick2", size = 5)
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "firebrick2", size = 5, shape=a)
rm(a)
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "firebrick2", size = 5, shape=a)
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "firebrick2", size = 5, shape="a")
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "firebrick2", size = 5, shape=1)
gmap + labs(x = 'Longitude', y = 'Latitude') + ggtitle("Tripadvisor Hotels & Attractions") +
# geom_point(data = coordinateshotels.total, color = "cornflowerblue", size = 1.5) +
geom_point(data = coordinateshotels.total, color = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd], size = 1.5) +
geom_point(data = coordinatesAttractions, color = "darkorange", size = 5, shape = 1)
coordinatesAttractions
coordinateshotels.total
hierarchical = hotels.hierarchical$groupsD4
hierarchical
length(hierarchical)
hierarchical = hotels.hierarchical$groupsD4[-missingCoordsInd]
length(hierarchical)
hierarchical.four.clusters = hotels.hierarchical$groupsD4[-missingCoordsInd]
kkmeans.besseldot.four.clusters = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd]
hierarchical.four.clusters
kkmeans.besseldot.four.clusters
table(hierarchical.four.clusters)
table(kkmeans.besseldot.four.clusters)
max(table(kkmeans.besseldot.four.clusters))
table(kkmeans.besseldot.four.clusters)
str(table(kkmeans.besseldot.four.clusters))
col(table(kkmeans.besseldot.four.clusters))
class(table(kkmeans.besseldot.four.clusters))
as.matrix(table(kkmeans.besseldot.four.clusters))
str(as.matrix(table(kkmeans.besseldot.four.clusters)))
as.matrix(table(kkmeans.besseldot.four.clusters))
a = as.matrix(table(kkmeans.besseldot.four.clusters))
row(a)[a==max(a)]
a = as.matrix(table(hierarchical.four.clusters))
row(a)[a==max(a)]
a
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
c.hierarchical = getLargestCluster(hierarchical.four.clusters)
c.kkmeans.besseldot = getLargestCluster(kkmeans.besseldot.four.clusters)
hierarchical.four.clusters
hotels.features
hotels
hotels.total
nrow(hotels.total)
hotels.total[-missingCoordsInd]
nrow(hotels.total[-missingCoordsInd])
nrow(hotels.total[-missingCoordsInd, ])
mappableHotels = hotels.total[-missingCoordsInd, ]
which(hierarchical.four.clusters == c.hierarchical)
hotels.in.c.hierarchical = mappableHotels[which(hierarchical.four.clusters == c.hierarchical), ]
hotels.in.c.hierarchical
hotels.in.c.hierarchical$hotel_name
length(hotels.in.c.hierarchical$hotel_name)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
hierarchical.hotels.in.largest.cluster
nrow(hierarchical.hotels.in.largest.cluster)
kkmeans.besseldot.hotels.in.largest.cluster =
getHotelsInLargestCluster(mappableHotels, kkmeans.besseldot.four.clusters, c.kkmeans.besseldot)
kkmeans.besseldot.hotels.in.largest.cluster =
getHotelsInLargestCluster(mappableHotels, kkmeans.besseldot.four.clusters, c.kkmeans.besseldot)
nrow(kkmeans.besseldot.hotels.in.largest.cluster)
kkmeans.besseldot.hotels.in.largest.cluster
rows(kkmeans.besseldot.hotels.in.largest.cluster)
row(kkmeans.besseldot.hotels.in.largest.cluster)
index(kkmeans.besseldot.hotels.in.largest.cluster)
kkmeans.besseldot.hotels.in.largest.cluster
str(kkmeans.besseldot.hotels.in.largest.cluster)
row.names(kkmeans.besseldot.hotels.in.largest.cluster)
row.names(hierarchical.hotels.in.largest.cluster)
is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster)[2], hierarchical.hotels.in.largest.cluster)
row.names(kkmeans.besseldot.hotels.in.largest.cluster)[2]
is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster)[2], row.names(hierarchical.hotels.in.largest.cluster))
is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster))
sum(is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster)[2], row.names(hierarchical.hotels.in.largest.cluster))
)
is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster))
sum(is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster)))
table(is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster)))
mean(is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster)))
is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster))
is.element( row.names(hierarchical.hotels.in.largest.cluster), row.names(kkmeans.besseldot.hotels.in.largest.cluster))
row.names(hierarchical.hotels.in.largest.cluster)
row.names(kkmeans.besseldot.hotels.in.largest.cluster)
clusterMatch(hierarchical.hotels.in.largest.cluster, kkmeans.besseldot.hotels.in.largest.cluster)
clusterMatch <- function(cl1, cl2) {
mean(is.element(row.names(cl1), row.names(cl2)))
}
clusterMatch(hierarchical.hotels.in.largest.cluster, kkmeans.besseldot.hotels.in.largest.cluster)
clusterMatch(kkmeans.besseldot.hotels.in.largest.cluster, hierarchical.hotels.in.largest.cluster)
is.element(row.names(hierarchical.hotels.in.largest.cluster), row.names(kkmeans.besseldot.hotels.in.largest.cluster))
table(is.element(row.names(hierarchical.hotels.in.largest.cluster), row.names(kkmeans.besseldot.hotels.in.largest.cluster)))
table(is.element(row.names(kkmeans.besseldot.hotels.in.largest.cluster), row.names(hierarchical.hotels.in.largest.cluster)))
nrow(kkmeans.besseldot.hotels.in.largest.cluster)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
NA > 5
if(match > currentMatch) {}
getBestMatchCluster <- function(hotels, maxCluster, clusters1, clusters2) {
currentMatch = 0
bestClusterPair = NA
for (i in seq_len(maxCluster)) {
h1 = getHotelsInCluster(hotels, clusters1, i)
for (j in seq_len(maxCluster)) {
h2 = getHotelsInCluster(hotels, clusters2, j)
match = clusterMatch(h1, h2)
if(match > currentMatch) {
currentMatch = match
bestClusterPair = list(h1, h2)
}
}
}
return(bestClusterPair)
}
getBestMatchCluster(mappableHotels, maxCluster = 4, clusters1 = hierarchical.four.clusters, clusters2 = kkmeans.besseldot.four.clusters)
getBestMatchCluster <- function(hotels, maxCluster, clusters1, clusters2) {
currentMatch = 0
bestClusterPair = NA
for (i in seq_len(maxCluster)) {
h1 = getHotelsInCluster(hotels, clusters1, i)
for (j in seq_len(maxCluster)) {
h2 = getHotelsInCluster(hotels, clusters2, j)
match = clusterMatch(h1, h2)
if(match > currentMatch) {
currentMatch = match
bestClusterPair = c(i, j)
}
}
}
return(bestClusterPair)
}
getBestMatchCluster(mappableHotels, maxCluster = 4, clusters1 = hierarchical.four.clusters, clusters2 = kkmeans.besseldot.four.clusters)
getHotelsInCluster(mappableHotels, hierarchical.four.clusters, 4)
getHotelsInCluster(mappableHotels, hierarchical.four.clusters, 4)$hotel_names
getHotelsInCluster(mappableHotels, hierarchical.four.clusters, 4)$hotel_name
getHotelsInCluster(mappableHotels, kkmeans.besseldot.four.clusters, 2)$hotel_name
clusterMatch(hierarchical.four.clusters, hierarchical.four.clusters)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
matchHotelsInCluster(getHotelsInCluster(mappableHotels, hierarchical.four.clusters, cluster = 4), getHotelsInCluster(mappableHotels, kkmeans.besseldot.four.clusters, cluster = 2))
hierarchical.four.clusters = hotels.hierarchical$groupsD4[-missingCoordsInd]
kkmeans.rbfdot.four.clusters = kkmeans.result.rbfdot[[4]]$membership[-missingCoordsInd]
kkmeans.polydot.four.clusters = kkmeans.result.polydot[[4]]$membership[-missingCoordsInd]
kkmeans.vanilladot.four.clusters = kkmeans.result.vanilladot[[4]]$membership[-missingCoordsInd]
kkmeans.besseldot.four.clusters = kkmeans.result.besseldot[[4]]$membership[-missingCoordsInd]
kkmeans.laplacedot.four.clusters = kkmeans.result.laplacedot[[4]]$membership[-missingCoordsInd]
kkmeans.anovadot.four.clusters = kkmeans.result.anovadot[[4]]$membership[-missingCoordsInd]
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.rbfdot.four.clusters)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
source('~/Google Drive/Data Analytics 1/R Code/compare_clusters.R', echo=TRUE)
hier.rbfdot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.rbfdot.four.clusters)
hier.polydot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.polydot.four.clusters)
hier.vanilladot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.vanilladot.four.clusters)
hier.laplacedot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.laplacedot.four.clusters)
hier.besseldot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.besseldot.four.clusters)
# -> [1] 4 2
# Check: matchHotelsInCluster(getHotelsInCluster(mappableHotels, hierarchical.four.clusters, cluster = 4),
#                             getHotelsInCluster(mappableHotels, kkmeans.besseldot.four.clusters, cluster = 2))
# -> 0.8571429, indeed high "match" value
hier.anovadot.best.match = getBestMatchCluster(mappableHotels,
maxCluster = 4,
clusters1 = hierarchical.four.clusters,
clusters2 = kkmeans.anovadot.four.clusters)
m = as.matrix(hotels.features) * 1
m
maxs = apply(m, 2, max)
mins = apply(m, 2, min)
m = scale(m, center = mins, scale = maxs - mins)
m
hier.anovadot.best.match
